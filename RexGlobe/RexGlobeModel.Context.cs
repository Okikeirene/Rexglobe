//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RexGlobe
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RexGlobeEntities : DbContext
    {
        public RexGlobeEntities()
            : base("name=RexGlobeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BusinessLineGroup> BusinessLineGroups { get; set; }
        public virtual DbSet<BusinessLine> BusinessLines { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerFile> CustomerFiles { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<LGA> LGAs { get; set; }
        public virtual DbSet<MenuCategory> MenuCategories { get; set; }
        public virtual DbSet<PaymentDate> PaymentDates { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Personnel> Personnels { get; set; }
        public virtual DbSet<Personnel_Type> Personnel_Type { get; set; }
        public virtual DbSet<PickUpRequest> PickUpRequests { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<Transportation> Transportations { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UsersProfile> UsersProfiles { get; set; }
        public virtual DbSet<Vechicle> Vechicles { get; set; }
        public virtual DbSet<VechicleType> VechicleTypes { get; set; }
        public virtual DbSet<DispatchType> DispatchTypes { get; set; }
        public virtual DbSet<In_Bound_Dispatch> In_Bound_Dispatch { get; set; }
        public virtual DbSet<Out_Bound_Dispatch> Out_Bound_Dispatch { get; set; }
        public virtual DbSet<Quantity> Quantities { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
    
        public virtual int CreateBooking(string senderName, string senderEmail, string originServiceLocation, string receiverName, string receiverEmail, string receiverDestination, string receiverPinCode, string receiverRegion, string receiverCity, string serviceLocation, string commodity, Nullable<decimal> weight, Nullable<decimal> totalWeight, Nullable<decimal> ratePerKG, Nullable<System.DateTime> expectedDeliveryDate, Nullable<int> serviceTax, string freight, string createdBy, ObjectParameter bookingID)
        {
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var senderEmailParameter = senderEmail != null ?
                new ObjectParameter("SenderEmail", senderEmail) :
                new ObjectParameter("SenderEmail", typeof(string));
    
            var originServiceLocationParameter = originServiceLocation != null ?
                new ObjectParameter("OriginServiceLocation", originServiceLocation) :
                new ObjectParameter("OriginServiceLocation", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var receiverEmailParameter = receiverEmail != null ?
                new ObjectParameter("ReceiverEmail", receiverEmail) :
                new ObjectParameter("ReceiverEmail", typeof(string));
    
            var receiverDestinationParameter = receiverDestination != null ?
                new ObjectParameter("ReceiverDestination", receiverDestination) :
                new ObjectParameter("ReceiverDestination", typeof(string));
    
            var receiverPinCodeParameter = receiverPinCode != null ?
                new ObjectParameter("ReceiverPinCode", receiverPinCode) :
                new ObjectParameter("ReceiverPinCode", typeof(string));
    
            var receiverRegionParameter = receiverRegion != null ?
                new ObjectParameter("ReceiverRegion", receiverRegion) :
                new ObjectParameter("ReceiverRegion", typeof(string));
    
            var receiverCityParameter = receiverCity != null ?
                new ObjectParameter("ReceiverCity", receiverCity) :
                new ObjectParameter("ReceiverCity", typeof(string));
    
            var serviceLocationParameter = serviceLocation != null ?
                new ObjectParameter("ServiceLocation", serviceLocation) :
                new ObjectParameter("ServiceLocation", typeof(string));
    
            var commodityParameter = commodity != null ?
                new ObjectParameter("Commodity", commodity) :
                new ObjectParameter("Commodity", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(decimal));
    
            var ratePerKGParameter = ratePerKG.HasValue ?
                new ObjectParameter("RatePerKG", ratePerKG) :
                new ObjectParameter("RatePerKG", typeof(decimal));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("ExpectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("ExpectedDeliveryDate", typeof(System.DateTime));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(int));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateBooking", senderNameParameter, senderEmailParameter, originServiceLocationParameter, receiverNameParameter, receiverEmailParameter, receiverDestinationParameter, receiverPinCodeParameter, receiverRegionParameter, receiverCityParameter, serviceLocationParameter, commodityParameter, weightParameter, totalWeightParameter, ratePerKGParameter, expectedDeliveryDateParameter, serviceTaxParameter, freightParameter, createdByParameter, bookingID);
        }
    
        public virtual int CreateCustomer(string userName, string passwordHash, string salt, string firstName, string lastName, string middleName, string phoneNumber, string stateID, Nullable<int> countryID, string email, ObjectParameter rEXID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomer", userNameParameter, passwordHashParameter, saltParameter, firstNameParameter, lastNameParameter, middleNameParameter, phoneNumberParameter, stateIDParameter, countryIDParameter, emailParameter, rEXID);
        }
    
        public virtual int CreatePassword(string username, string password, ObjectParameter result)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePassword", usernameParameter, passwordParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> CreatePersonal(string username, string dDLRole, string firstName, string middleName, string lastName, string gender, string designation, string personnel_type, string email1, string phoneNumber, string user_id, ObjectParameter personal_ID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var dDLRoleParameter = dDLRole != null ?
                new ObjectParameter("DDLRole", dDLRole) :
                new ObjectParameter("DDLRole", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var personnel_typeParameter = personnel_type != null ?
                new ObjectParameter("personnel_type", personnel_type) :
                new ObjectParameter("personnel_type", typeof(string));
    
            var email1Parameter = email1 != null ?
                new ObjectParameter("Email1", email1) :
                new ObjectParameter("Email1", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var user_idParameter = user_id != null ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreatePersonal", usernameParameter, dDLRoleParameter, firstNameParameter, middleNameParameter, lastNameParameter, genderParameter, designationParameter, personnel_typeParameter, email1Parameter, phoneNumberParameter, user_idParameter, personal_ID);
        }
    
        public virtual int CreatePickUp(string name, string email, string contactNumber, string address, string stateID, string commodity, Nullable<System.DateTime> pickUpDate, string weight, string nearestServiceLocation, string username, ObjectParameter pickUpID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var stateIDParameter = stateID != null ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(string));
    
            var commodityParameter = commodity != null ?
                new ObjectParameter("Commodity", commodity) :
                new ObjectParameter("Commodity", typeof(string));
    
            var pickUpDateParameter = pickUpDate.HasValue ?
                new ObjectParameter("PickUpDate", pickUpDate) :
                new ObjectParameter("PickUpDate", typeof(System.DateTime));
    
            var weightParameter = weight != null ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(string));
    
            var nearestServiceLocationParameter = nearestServiceLocation != null ?
                new ObjectParameter("NearestServiceLocation", nearestServiceLocation) :
                new ObjectParameter("NearestServiceLocation", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePickUp", nameParameter, emailParameter, contactNumberParameter, addressParameter, stateIDParameter, commodityParameter, pickUpDateParameter, weightParameter, nearestServiceLocationParameter, usernameParameter, pickUpID);
        }
    
        public virtual int PasswordReset(string email, ObjectParameter firstName, ObjectParameter lastName, ObjectParameter salt, ObjectParameter result)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PasswordReset", emailParameter, firstName, lastName, salt, result);
        }
    
        public virtual int UpdatePassword(string userName, string passwordHash, string salt, string phoneNumber, string email, ObjectParameter rEXID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", userNameParameter, passwordHashParameter, saltParameter, phoneNumberParameter, emailParameter, rEXID);
        }
    }
}
