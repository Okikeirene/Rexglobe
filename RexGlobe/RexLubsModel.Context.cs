//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RexLubs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RexLubsEntities : DbContext
    {
        public RexLubsEntities()
            : base("name=RexLubsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BusinessLineGroup> BusinessLineGroups { get; set; }
        public virtual DbSet<BusinessLine> BusinessLines { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerFile> CustomerFiles { get; set; }
        public virtual DbSet<Customer1> Customers1 { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DispatchType> DispatchTypes { get; set; }
        public virtual DbSet<EmployeeFile> EmployeeFiles { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<In_Bound_Dispatch> In_Bound_Dispatch { get; set; }
        public virtual DbSet<LGA> LGAs { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MenuCategory> MenuCategories { get; set; }
        public virtual DbSet<Out_Bound_Dispatch> Out_Bound_Dispatch { get; set; }
        public virtual DbSet<PaymentDate> PaymentDates { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentsLubricant> PaymentsLubricants { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<Personnel> Personnels { get; set; }
        public virtual DbSet<Personnel_Type> Personnel_Type { get; set; }
        public virtual DbSet<PickUpRequest> PickUpRequests { get; set; }
        public virtual DbSet<Procurement> Procurements { get; set; }
        public virtual DbSet<ProcurementBudget> ProcurementBudgets { get; set; }
        public virtual DbSet<ProcurementDescritpion> ProcurementDescritpions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }
        public virtual DbSet<ProductRequest> ProductRequests { get; set; }
        public virtual DbSet<ProductRequestApproval> ProductRequestApprovals { get; set; }
        public virtual DbSet<Quantity> Quantities { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
        public virtual DbSet<Shipment> Shipments { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<SubMenu> SubMenus { get; set; }
        public virtual DbSet<Transportation> Transportations { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UsersProfile> UsersProfiles { get; set; }
        public virtual DbSet<Vechicle> Vechicles { get; set; }
        public virtual DbSet<VechicleType> VechicleTypes { get; set; }
        public virtual DbSet<WarehouseRequest> WarehouseRequests { get; set; }
        public virtual DbSet<YearMonth> YearMonths { get; set; }
    
        public virtual int CreateBooking(string senderName, string senderEmail, string originServiceLocation, string receiverName, string receiverEmail, string receiverDestination, string receiverPinCode, string receiverRegion, string receiverCity, string serviceLocation, string commodity, Nullable<decimal> weight, Nullable<decimal> totalWeight, Nullable<decimal> ratePerKG, Nullable<System.DateTime> expectedDeliveryDate, Nullable<decimal> serviceTax, string freight, string createdBy, ObjectParameter bookingID)
        {
            var senderNameParameter = senderName != null ?
                new ObjectParameter("SenderName", senderName) :
                new ObjectParameter("SenderName", typeof(string));
    
            var senderEmailParameter = senderEmail != null ?
                new ObjectParameter("SenderEmail", senderEmail) :
                new ObjectParameter("SenderEmail", typeof(string));
    
            var originServiceLocationParameter = originServiceLocation != null ?
                new ObjectParameter("OriginServiceLocation", originServiceLocation) :
                new ObjectParameter("OriginServiceLocation", typeof(string));
    
            var receiverNameParameter = receiverName != null ?
                new ObjectParameter("ReceiverName", receiverName) :
                new ObjectParameter("ReceiverName", typeof(string));
    
            var receiverEmailParameter = receiverEmail != null ?
                new ObjectParameter("ReceiverEmail", receiverEmail) :
                new ObjectParameter("ReceiverEmail", typeof(string));
    
            var receiverDestinationParameter = receiverDestination != null ?
                new ObjectParameter("ReceiverDestination", receiverDestination) :
                new ObjectParameter("ReceiverDestination", typeof(string));
    
            var receiverPinCodeParameter = receiverPinCode != null ?
                new ObjectParameter("ReceiverPinCode", receiverPinCode) :
                new ObjectParameter("ReceiverPinCode", typeof(string));
    
            var receiverRegionParameter = receiverRegion != null ?
                new ObjectParameter("ReceiverRegion", receiverRegion) :
                new ObjectParameter("ReceiverRegion", typeof(string));
    
            var receiverCityParameter = receiverCity != null ?
                new ObjectParameter("ReceiverCity", receiverCity) :
                new ObjectParameter("ReceiverCity", typeof(string));
    
            var serviceLocationParameter = serviceLocation != null ?
                new ObjectParameter("ServiceLocation", serviceLocation) :
                new ObjectParameter("ServiceLocation", typeof(string));
    
            var commodityParameter = commodity != null ?
                new ObjectParameter("Commodity", commodity) :
                new ObjectParameter("Commodity", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var totalWeightParameter = totalWeight.HasValue ?
                new ObjectParameter("TotalWeight", totalWeight) :
                new ObjectParameter("TotalWeight", typeof(decimal));
    
            var ratePerKGParameter = ratePerKG.HasValue ?
                new ObjectParameter("RatePerKG", ratePerKG) :
                new ObjectParameter("RatePerKG", typeof(decimal));
    
            var expectedDeliveryDateParameter = expectedDeliveryDate.HasValue ?
                new ObjectParameter("ExpectedDeliveryDate", expectedDeliveryDate) :
                new ObjectParameter("ExpectedDeliveryDate", typeof(System.DateTime));
    
            var serviceTaxParameter = serviceTax.HasValue ?
                new ObjectParameter("ServiceTax", serviceTax) :
                new ObjectParameter("ServiceTax", typeof(decimal));
    
            var freightParameter = freight != null ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateBooking", senderNameParameter, senderEmailParameter, originServiceLocationParameter, receiverNameParameter, receiverEmailParameter, receiverDestinationParameter, receiverPinCodeParameter, receiverRegionParameter, receiverCityParameter, serviceLocationParameter, commodityParameter, weightParameter, totalWeightParameter, ratePerKGParameter, expectedDeliveryDateParameter, serviceTaxParameter, freightParameter, createdByParameter, bookingID);
        }
    }
}
