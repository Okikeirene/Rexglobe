//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RexGlobe.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class RexGlobeEntities : DbContext
    {
        public RexGlobeEntities()
            : base("name=RexGlobeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Country> Countries { get; set; }
        public DbSet<MenuCategory> MenuCategories { get; set; }
        public DbSet<Region> Regions { get; set; }
        public DbSet<Resource> Resources { get; set; }
        public DbSet<State> States { get; set; }
        public DbSet<SubMenu> SubMenus { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<UsersProfile> UsersProfiles { get; set; }
        public DbSet<UserAccount> UserAccounts { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<Booking> Bookings { get; set; }
        public DbSet<BusinessLineGroup> BusinessLineGroups { get; set; }
        public DbSet<BusinessLine> BusinessLines { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerFile> CustomerFiles { get; set; }
        public DbSet<PaymentDate> PaymentDates { get; set; }
        public DbSet<Payment> Payments { get; set; }
        public DbSet<SaleType> SaleTypes { get; set; }
        public DbSet<Shipment> Shipments { get; set; }
        public DbSet<Status> Status { get; set; }
        public DbSet<Transportation> Transportations { get; set; }
        public DbSet<VechicleType> VechicleTypes { get; set; }
        public DbSet<PickUpRequest> PickUpRequests { get; set; }
        public DbSet<Vechicle> Vechicles { get; set; }
    
        public virtual int CreateCustomer(string userName, string passwordHash, string salt, string firstName, string lastName, string middleName, string phoneNumber, Nullable<int> stateID, Nullable<int> countryID, string email, ObjectParameter rEXID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomer", userNameParameter, passwordHashParameter, saltParameter, firstNameParameter, lastNameParameter, middleNameParameter, phoneNumberParameter, stateIDParameter, countryIDParameter, emailParameter, rEXID);
        }
    
        public virtual int CreateCustomer1(string userName, string passwordHash, string salt, string firstName, string lastName, string middleName, string phoneNumber, Nullable<int> stateID, Nullable<int> countryID, string email, ObjectParameter rEXID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomer1", userNameParameter, passwordHashParameter, saltParameter, firstNameParameter, lastNameParameter, middleNameParameter, phoneNumberParameter, stateIDParameter, countryIDParameter, emailParameter, rEXID);
        }
    }
}
